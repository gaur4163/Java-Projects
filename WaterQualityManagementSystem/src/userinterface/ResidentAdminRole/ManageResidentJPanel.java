/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.ResidentAdminRole;

import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Organization.ResidentOrganization;
import Business.Person.Person;
import Business.Person.Residents;
import Business.Validations.MyEmailAddressValidator;
import Business.Validations.MyPhoneNumberVerifier;
import Business.Validations.MyStringVerifier;
import Business.WaterQualityMonitoring;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.InputVerifier;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gaurav
 */
public class ManageResidentJPanel extends javax.swing.JPanel {
      private BufferedImage image;
    private OrganizationDirectory organizationDir;
    private JPanel userProcessContainer;
    private ResidentOrganization residentOrg;
   private Network ntw;
   WaterQualityMonitoring system;
    
    
    /**
     * Creates new form ManageOrganizationJPanel
     */
    public ManageResidentJPanel(JPanel userProcessContainer,OrganizationDirectory organizationDir, Network ntw,WaterQualityMonitoring system) {
        initComponents();
        this.setSize(650, 530);
        this.userProcessContainer = userProcessContainer;
        this.organizationDir = organizationDir;
        this.system=system;
        this.residentOrg = (ResidentOrganization)organizationDir.searchOrganization(Organization.Type.ResidentOrganization);
       this.ntw = ntw;
        populateTable(residentOrg);
        populateMonth();
        populateDate();
        populateYear();
        setImg();
        addVerifiers();
    }
    
     private void addVerifiers() {
        InputVerifier phVerifier = new MyPhoneNumberVerifier();
        contactNumber.setInputVerifier(phVerifier);
        InputVerifier nameVerifier = new MyStringVerifier();
        name.setInputVerifier(nameVerifier);
        primaryDoctor.setInputVerifier(nameVerifier);
    }
    public void setImg(){
    setOpaque(true);
        setBorder(BorderFactory.createLineBorder(Color.BLUE, 5));
        try
        {
            image = ImageIO.read(new File(getClass().getResource("/userinterface/water-background.jpg").toURI()));
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    
    }
    
    
     @Override
    public Dimension getPreferredSize()
    {
        return (new Dimension(300, 300));
    }

    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        g.drawImage(image, 0, 0, this);
    }
    
    
   

    private void populateTable(Organization organization){
        
        DefaultTableModel model = (DefaultTableModel) organizationJTable.getModel();
        
        model.setRowCount(0);
        
        for (Residents resident : residentOrg.getResidentDirectory().getResidentList()){
            Object[] row = new Object[5];
            row[0] = resident.getName();
            row[1] = resident.getEmailAddress();
            row[2] = resident.getContactNum();
            row[3] = resident.getAge();
            row[4] = resident.getPrimaryDoctorName();
            model.addRow(row);
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        organizationJTable = new javax.swing.JTable();
        createResident = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        emailAddress = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        contactNumber = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        primaryDoctor = new javax.swing.JTextField();
        monthCombo = new javax.swing.JComboBox();
        dateCombo = new javax.swing.JComboBox();
        yearCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        organizationJTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        organizationJTable.setForeground(new java.awt.Color(51, 51, 255));
        organizationJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Email", "Contact No.", "Age", "Primary Doctor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        organizationJTable.setGridColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(organizationJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 180, 660, 120));

        createResident.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        createResident.setForeground(new java.awt.Color(0, 0, 153));
        createResident.setText("Create Resident");
        createResident.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createResidentActionPerformed(evt);
            }
        });
        add(createResident, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 470, -1, 30));

        backJButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        backJButton.setForeground(new java.awt.Color(0, 0, 153));
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 590, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 0, 102));
        jLabel2.setText("Name");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 330, 50, 20));

        name.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        name.setForeground(new java.awt.Color(51, 51, 255));
        add(name, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 330, 140, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 0, 102));
        jLabel4.setText("Manage Resident");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 0, 102));
        jLabel5.setText("Email Address");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 370, 100, 30));

        emailAddress.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        emailAddress.setForeground(new java.awt.Color(51, 51, 255));
        add(emailAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 370, 140, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 0, 102));
        jLabel6.setText("Contact Number:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 410, 110, 30));

        contactNumber.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        contactNumber.setForeground(new java.awt.Color(51, 51, 255));
        add(contactNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 410, 140, 30));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 0, 102));
        jLabel7.setText("Date Of Birth");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 330, 90, 20));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 0, 102));
        jLabel8.setText("Primary Doctor");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 370, 100, 20));

        primaryDoctor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        primaryDoctor.setForeground(new java.awt.Color(51, 51, 255));
        add(primaryDoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 370, 230, 30));

        monthCombo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        monthCombo.setForeground(new java.awt.Color(51, 51, 255));
        monthCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        monthCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthComboActionPerformed(evt);
            }
        });
        add(monthCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 330, -1, -1));

        dateCombo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dateCombo.setForeground(new java.awt.Color(51, 51, 255));
        dateCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dateCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateComboActionPerformed(evt);
            }
        });
        add(dateCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 330, -1, -1));

        yearCombo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        yearCombo.setForeground(new java.awt.Color(51, 51, 255));
        yearCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(yearCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 330, -1, -1));

        jLabel3.setFont(new java.awt.Font("Franklin Gothic Heavy", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 0, 204));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("WATER QUALITY  MANAGEMENT SYSTEM ");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 90));
    }// </editor-fold>//GEN-END:initComponents
public boolean checkIfExists(String name ){
     boolean exist=false;
            //System.out.println(" count "+count);
            if(system.getNetworkList().size()!=0){
            for(Network n: system.getNetworkList()){
               // System.out.println("netw name "+n);
            for (Enterprise e: n.getEnterpriseDirectory().getEnterpriseList())
            {//System.out.println("etr name "+e);
                for(Person d: e.getPersonDirectory().getPersonList()){
                 if(d.getName().equalsIgnoreCase(name))
           {
           exist = true;
           return exist;
           }
                }
            for (Organization org : e.getOrganizationDirectory().getOrganizationList())
            {
                if(org instanceof ResidentOrganization){
            for(Person p :((ResidentOrganization)org).getResidentDirectory().getResidentList()){
          
             if(p.getName().equalsIgnoreCase(name))
           {
           exist = true;
           return exist;
           }
            }}
               
            else{     // System.out.println("org name "+org);
            for(Person p :org.getPersonDirectory().getPersonList()){
           if(p.getName().equalsIgnoreCase(name))
           {
           exist = true;
           return exist;
           } }
           
            }
            }
            }
           
           
            }
        }
    return exist;
    }
    
    private void createResidentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createResidentActionPerformed
       try{
        if (checkBlankInput()){
        
        String rname = name.getText();
        
        String email = emailAddress.getText();
        
            MyEmailAddressValidator eav = new MyEmailAddressValidator();
        if (eav.isValidEmailAddress(email)==false){
        JOptionPane.showMessageDialog(null, "Please Enter the valid email address", "ERROR", JOptionPane.ERROR_MESSAGE); 
        return;
        }
        if(checkIfExists(rname)){
         JOptionPane.showMessageDialog(null, "Person name already in use", "ERROR", JOptionPane.ERROR_MESSAGE); 
        return;}
        
        String contact = contactNumber.getText();
        Date doB = null;
        int day = Integer.parseInt((String)dateCombo.getSelectedItem());
        String month = (String)monthCombo.getSelectedItem();
        int year =(int)yearCombo.getSelectedItem();
        
        String doctorName = primaryDoctor.getText();
        
       Residents r = residentOrg.getResidentDirectory().createResident(rname, doctorName, year, rname, contact, email);
          r.setNtw(ntw);
         
          
        populateTable(residentOrg);
        JOptionPane.showMessageDialog(this, "Residents are created successfully", "SUCCESS", JOptionPane.PLAIN_MESSAGE);
        clearFields();
        
      }
        else
        {
            JOptionPane.showMessageDialog(this, "Please enter all values", "Error", JOptionPane.ERROR_MESSAGE);
        } 
        }catch (Exception e){
                 JOptionPane.showMessageDialog(this, "No Data Found","ERROR",JOptionPane.ERROR_MESSAGE);
                 return; 
        }
    }//GEN-LAST:event_createResidentActionPerformed
     
    
    private void clearFields()
        {
            name.setText("");
            emailAddress.setText("");
            contactNumber.setText("");
          
            primaryDoctor.setText("");
            
        }
    private Boolean checkBlankInput()
    {
           if(name.getText().length()==0
            ||emailAddress.getText().length()==0
            ||contactNumber.getText().length()==0
         
            ||primaryDoctor.getText().length()==0
            )
            {
                return false;
            }
        else{
            return true;
        }
    }
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void monthComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_monthComboActionPerformed

    private void dateComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateComboActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTextField contactNumber;
    private javax.swing.JButton createResident;
    private javax.swing.JComboBox dateCombo;
    private javax.swing.JTextField emailAddress;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox monthCombo;
    private javax.swing.JTextField name;
    private javax.swing.JTable organizationJTable;
    private javax.swing.JTextField primaryDoctor;
    private javax.swing.JComboBox yearCombo;
    // End of variables declaration//GEN-END:variables

    private void populateMonth() {
      monthCombo.removeAllItems();
            monthCombo.addItem("Jan");
            monthCombo.addItem("Feb");
            monthCombo.addItem("Mar");
            monthCombo.addItem("Apr");
            monthCombo.addItem("May");
            monthCombo.addItem("Jun");
            monthCombo.addItem("Jul");
            monthCombo.addItem("Aug");
            monthCombo.addItem("Sep");
            monthCombo.addItem("Oct");
            monthCombo.addItem("Nov");
            monthCombo.addItem("Dec");
           
            
        //To change body of generated methods, choose Tools | Templates.
    }

    private void populateDate() {
        dateCombo.removeAllItems();
         String mon = (String) monthCombo.getSelectedItem();
         if (mon.equals("Jan") || mon.equals("Mar") || mon.equals("May") || mon.equals("Jul") || mon.equals("Aug") || mon.equals("Oct") || mon.equals("Dec")){
             dateCombo.addItem("1");
             dateCombo.addItem("2");
             dateCombo.addItem("3");
             dateCombo.addItem("4");
             dateCombo.addItem("5");
             dateCombo.addItem("6");
             dateCombo.addItem("7");
             dateCombo.addItem("8");
             dateCombo.addItem("9");
             dateCombo.addItem("10");
             dateCombo.addItem("11");
             dateCombo.addItem("12");
             dateCombo.addItem("13");
             dateCombo.addItem("14");
             dateCombo.addItem("15");
             dateCombo.addItem("16");
             dateCombo.addItem("17");
             dateCombo.addItem("18");
             dateCombo.addItem("19");
             dateCombo.addItem("20");
             dateCombo.addItem("21");
             dateCombo.addItem("22");
             dateCombo.addItem("23");
             dateCombo.addItem("24");
             dateCombo.addItem("25");
             dateCombo.addItem("26");
             dateCombo.addItem("27");
             dateCombo.addItem("28");
             dateCombo.addItem("29");
             dateCombo.addItem("30");
             dateCombo.addItem("31");
         }
             else if (mon.equals("Apr") || mon.equals("Jun") || mon.equals("Sep") || mon.equals("Nov")){
             dateCombo.addItem("1");
             dateCombo.addItem("2");
             dateCombo.addItem("3");
             dateCombo.addItem("4");
             dateCombo.addItem("5");
             dateCombo.addItem("6");
             dateCombo.addItem("7");
             dateCombo.addItem("8");
             dateCombo.addItem("9");
             dateCombo.addItem("10");
             dateCombo.addItem("11");
             dateCombo.addItem("12");
             dateCombo.addItem("13");
             dateCombo.addItem("14");
             dateCombo.addItem("15");
             dateCombo.addItem("16");
             dateCombo.addItem("17");
             dateCombo.addItem("18");
             dateCombo.addItem("19");
             dateCombo.addItem("20");
             dateCombo.addItem("21");
             dateCombo.addItem("22");
             dateCombo.addItem("23");
             dateCombo.addItem("24");
             dateCombo.addItem("25");
             dateCombo.addItem("26");
             dateCombo.addItem("27");
             dateCombo.addItem("28");
             dateCombo.addItem("29");
             dateCombo.addItem("30");
            
             }
             else {
             dateCombo.addItem("1");
             dateCombo.addItem("2");
             dateCombo.addItem("3");
             dateCombo.addItem("4");
             dateCombo.addItem("5");
             dateCombo.addItem("6");
             dateCombo.addItem("7");
             dateCombo.addItem("8");
             dateCombo.addItem("9");
             dateCombo.addItem("10");
             dateCombo.addItem("11");
             dateCombo.addItem("12");
             dateCombo.addItem("13");
             dateCombo.addItem("14");
             dateCombo.addItem("15");
             dateCombo.addItem("16");
             dateCombo.addItem("17");
             dateCombo.addItem("18");
             dateCombo.addItem("19");
             dateCombo.addItem("20");
             dateCombo.addItem("21");
             dateCombo.addItem("22");
             dateCombo.addItem("23");
             dateCombo.addItem("24");
             dateCombo.addItem("25");
             dateCombo.addItem("26");
             dateCombo.addItem("27");
             dateCombo.addItem("28");
             dateCombo.addItem("29");
             }
       
         //To change body of generated methods, choose Tools | Templates.
    }

    private void populateYear() {
        yearCombo.removeAllItems();
         String year;
         int max=2015;
         for (int count=1900;count<max;count++  ){
             yearCombo.addItem(count);
         }
//To change body of generated methods, choose Tools | Templates.
    }
}
