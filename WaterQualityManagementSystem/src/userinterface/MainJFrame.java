/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Business.WaterQualityMonitoring;
import Business.ConfigureASystem;
import Business.DB4OUtil.DB4OUtil;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HouseholdCommunityEnterprise;
import Business.LoadImageApp;
import Business.Measurements.WaterQualityMeasurement;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.ResidentOrganization;
import Business.Organization.SurveyorOrganization;
import Business.Person.Person;
import Business.Person.ResidentDirectory;
import Business.Person.Residents;
import Business.Person.VitalSign;
import Business.Person.VitalSignHistory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.SurveyorVisitWorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Gaurav
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    private WaterQualityMonitoring system;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();

    public MainJFrame() {
        initComponents();
     
   this.setExtendedState(MAXIMIZED_BOTH);
        system = dB4OUtil.retrieveSystem();
          Person.setSys(system);
           sensor(system);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    
    
    public void sensor(WaterQualityMonitoring system){
  
        ResidentDirectory list = getAllResidents(system);   
          final ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();
    service.scheduleWithFixedDelay(new Runnable()
    {
        @Override
        public void run()
        { System.out.println(new Date());
            for(Residents p :list.getResidentList()){
            //System.out.println(new Date());
            System.out.println("person name "+p.getName());
                    
            WaterQualityMeasurement measurement = p.getFamily().getMeasurementList().createAndAddMeasurements();
            System.out.println("re");
            addReading(measurement, p, system);
            System.out.println("reading : "+p.getFamily().getMeasurementList().getHistory().size()); 
             }
        }}, 0, 150, TimeUnit.SECONDS);
        
      
    }
    public void addReading(WaterQualityMeasurement measurement, Residents p,WaterQualityMonitoring system){
        Random r = new Random();
        float dissolvedOxygen = r.nextInt((12 - 3) + 1) + 3;
         float pHValue = r.nextInt((9 - 6) + 1) + 6;
          float salinity = r.nextInt((12 - 5) + 1) + 5;
           float ionBromide = 0;
          float ionFluoride = r.nextInt((1 - 0) + 1) + 0;
            float ionLead = 0;
              float ionMercury =0;
                float ionNitrates = r.nextInt((55 - 20) + 1) + 20;
            measurement.setDissolvedOxygen(dissolvedOxygen);
            measurement.setpHvalue(pHValue);
            measurement.setSalinity(salinity);
            measurement.setIonBromide(ionBromide);
            measurement.setIonFluoride(ionFluoride);
            measurement.setIonLead(ionLead);
            measurement.setIonMercury(ionMercury);
            measurement.setIonNitrates(ionNitrates);
            /*Set current date and time as TimeStamp*/
            measurement.setTimestampOfMeasure(new Date());
            String statusq = WaterQualityStatus(measurement);
            measurement.setStatus(statusq);
   
            if (statusq.equalsIgnoreCase("Abnormal")){
                    
        SurveyorVisitWorkRequest request = new SurveyorVisitWorkRequest();
        request.setMessage("Abnormality Found in Resident House");
        if(searchUserAccountDirectory(p)!=null){
        request.setSender(searchUserAccountDirectory(p));
            System.out.println("sender "+p.getName());
        }
                   
        request.setStatus("To be Processed");
        
        
        Organization org = null;
      //  System.out.println(" network "+network);
        Network ntwk = p.getNtw();
         System.out.println("re "+statusq+" "+ntwk);
        for (Enterprise enterp: ntwk.getEnterpriseDirectory().getEnterpriseList() ){
            for (Organization organization : enterp.getOrganizationDirectory().getOrganizationList()){

             //   System.out.println(" organization "+organization);
                if (organization instanceof SurveyorOrganization){
                    org = organization;
                   // System.out.println("checking isntance");
                    break;
                }
            }}
            if (org!=null){
                org.getWorkQueue().getWorkRequestList().add(request);
              
            }

          }   
        } 

     public UserAccount searchUserAccountDirectory(Residents residentAcc){
        UserAccount userAcc = null;
        for(Network ntwk:system.getNetworkList()){
        for(Enterprise etr: ntwk.getEnterpriseDirectory().getEnterpriseList()){
               if(etr instanceof HouseholdCommunityEnterprise)
               {
               for(Organization org: etr.getOrganizationDirectory().getOrganizationList()){
                   if( org instanceof ResidentOrganization){
                      userAcc= residentAcc.searchAccount(residentAcc, ((ResidentOrganization)org).getUserAccountDirectory());
                       
                      }
                   }
               }
            }}
        return userAcc;
    }
      private String WaterQualityStatus(WaterQualityMeasurement waterQ) {
        String waterQualityStatus = "Normal";

            float pHValue = waterQ.getpHvalue();
            float salinity = waterQ.getSalinity();
            float ionNitrates = waterQ.getIonNitrates();
            float ionLead = waterQ.getIonLead();
            float ionBromide = waterQ.getIonBromide();
            float ionFluoride = waterQ.getIonFluoride();
            float ionMercury = waterQ.getIonMercury();
            float dissolvedOxygen = waterQ.getDissolvedOxygen();
        /*Toddler*/
      
            if ((pHValue <= 6.5 || pHValue >= 8.5) /*Respiration Rate*/
                    || (salinity > 10) /*Heart Rate*/
                    || (ionNitrates >= 50) 
                    || (ionLead >= .01)
                    || ( ionBromide >= .01)
                    || ( ionFluoride >= 1.5)
                    || (ionMercury >= .001)
                    || (dissolvedOxygen < 4 || dissolvedOxygen > 11)) /*mg/l*/ {
                waterQualityStatus = "Abnormal";
            }
        
            return waterQualityStatus;
    }

        
          
          
                    
    
     public ResidentDirectory getAllResidents(WaterQualityMonitoring system){
    ResidentDirectory list = new ResidentDirectory();
    
     for (Network network : system.getNetworkList()) {
                //Step 2-a: Check against each enterprise
                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                   
                    if (enterprise instanceof HouseholdCommunityEnterprise) {
                        //Step3: Check against each organization inside that enterprise
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            
                            if (organization instanceof ResidentOrganization) {
                              ResidentOrganization  org = (ResidentOrganization)organization;
                           //   for(Residents p : org.getResidentDirectory().getResidentList()){
                                for(UserAccount p : org.getUserAccountDirectory().getUserAccountList()){ 
                              list.addResidents(p.getResidents());
                                  System.out.println("person :"+p);
                              }
                            }
                        }
                    }}}
    
    return list;
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        loginJButton = new javax.swing.JButton();
        userNameJTextField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        loginJLabel = new javax.swing.JLabel();
        logoutJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        container = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        loginJButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        loginJButton.setForeground(new java.awt.Color(102, 0, 102));
        loginJButton.setText("Login");
        loginJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginJButtonActionPerformed(evt);
            }
        });
        jPanel1.add(loginJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 100, 30));

        userNameJTextField.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        userNameJTextField.setForeground(new java.awt.Color(0, 0, 255));
        jPanel1.add(userNameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 118, -1));

        passwordField.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        passwordField.setForeground(new java.awt.Color(0, 0, 255));
        jPanel1.add(passwordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 118, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 102));
        jLabel1.setText("Sign In");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 0, 102));
        jLabel2.setText("Password");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, -1, -1));
        jPanel1.add(loginJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 228, -1, -1));

        logoutJButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        logoutJButton.setForeground(new java.awt.Color(102, 0, 102));
        logoutJButton.setText("Logout");
        logoutJButton.setEnabled(false);
        logoutJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutJButtonActionPerformed(evt);
            }
        });
        jPanel1.add(logoutJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 100, 31));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 0, 102));
        jLabel4.setText("User Name");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, -1));

        jSplitPane1.setLeftComponent(jPanel1);

        container.setLayout(new java.awt.CardLayout());

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/MAIN_PAGE.jpg"))); // NOI18N
        jLabel3.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/water-background.jpg"))); // NOI18N
        container.add(jLabel3, "card2");

        jSplitPane1.setRightComponent(container);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginJButtonActionPerformed
       try{ // Get user name
        String userName = userNameJTextField.getText();
        // Get Password
        char[] passwordCharArray = passwordField.getPassword();
        String password = String.valueOf(passwordCharArray);
  System.out.println(" in login ");
        //Step1: Check in the system user account directory if you have the user
        UserAccount userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);
        Enterprise inEnterprise = null;
        Organization inOrganization = null;
        Network ntwk = null;
        if (userAccount == null) {
            //Step2: Go inside each network to check each enterprise
            for (Network network : system.getNetworkList()) {
                //Step 2-a: Check against each enterprise
                  //System.out.println("network in login "+ntwk);
                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                     // System.out.println("enterprise in login "+enterprise);
                    userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                     //ntwk=network;
                    if (userAccount == null) {
                        //Step3: Check against each organization inside that enterprise
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
                            if (userAccount != null) {
                                inEnterprise = enterprise;
                                inOrganization = organization;
                                ntwk=network;
                                //System.out.println("network in login "+ntwk);
                                break;
                            }
                        }
                    } else {
                        inEnterprise = enterprise;
                        ntwk=network;
                        break;
                    }
                    if (inOrganization != null) {
                        break;
                    }
                }
                if (inEnterprise != null) {
                    break;
                }
                
            if(ntwk !=null){
            break;
            }
            }
        }

        if (userAccount == null) {
            JOptionPane.showMessageDialog(null, "Invalid Credentails!");
            return;
        } else {
            //  System.out.println("network after login "+ntwk);
            CardLayout layout = (CardLayout) container.getLayout();
            container.add("workArea", userAccount.getRole().createWorkArea(container, userAccount, inOrganization, inEnterprise, system,ntwk));
            layout.next(container);
        }
         loginJButton.setEnabled(false);
        logoutJButton.setEnabled(true);
        userNameJTextField.setEnabled(false);
        passwordField.setEnabled(false);
    }catch(Exception e)
    {
        JOptionPane.showMessageDialog(null, "There is some Issue, Please try again later", null, JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_loginJButtonActionPerformed

    private void logoutJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutJButtonActionPerformed
        logoutJButton.setEnabled(false);
        userNameJTextField.setEnabled(true);
        passwordField.setEnabled(true);
        loginJButton.setEnabled(true);

        userNameJTextField.setText("");
        passwordField.setText("");

        container.removeAll();
        JPanel blankJP = new JPanel();
          this.setExtendedState(MAXIMIZED_BOTH);
        blankJP.add(jLabel3);
        container.add("blank", blankJP);
      
        CardLayout crdLyt = (CardLayout) container.getLayout();
        crdLyt.next(container);
        dB4OUtil.storeSystem(system);
    }//GEN-LAST:event_logoutJButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
//        LoadImageApp f = new LoadImageApp();
//        f.add(new LoadImageApp());
//        f.pack();
//        f.setVisible(true);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               // LoadImageApp.main(args);
                
                new MainJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel container;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton loginJButton;
    private javax.swing.JLabel loginJLabel;
    private javax.swing.JButton logoutJButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField userNameJTextField;
    // End of variables declaration//GEN-END:variables
}
