/*
 * 
 */

package userinterface.AnalystRole;

import userinterface.AdminRole.*;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HouseholdCommunityEnterprise;
import Business.Enterprise.MunicipalCorporationEnterprise;
import Business.Measurements.WaterQualityMeasurement;
import Business.Network.Network;
import Business.Organization.MaintenanceOrganization;
import Business.Organization.Organization;
import Business.Organization.ResidentOrganization;
import Business.Organization.SurveyorOrganization;
import Business.Person.Residents;
import Business.Person.VitalSign;
import Business.WorkQueue.LineDefectMaintenanceWorkRequest;
import Business.WorkQueue.QualityMaintenanceWorkRequest;
import Business.WorkQueue.SurveyorVisitWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author  Gaurav
 */
public class AnalystWorkAreaJPanel extends javax.swing.JPanel {
    private BufferedImage image;
    JPanel userProcessContainer; private Network ntwk;
    Enterprise enterprise;
    /** Creates new form AdminWorkAreaJPanel */
    public AnalystWorkAreaJPanel(JPanel userProcessContainer, Enterprise enterprise, Network ntwk) {
        initComponents();
        setImg();
        this.ntwk = ntwk;
        //this.setPreferredSize(new Dimension(942,500));
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        valueLabel.setText(enterprise.getName());
      
    }
    
    
        public void setImg(){
    setOpaque(true);
        setBorder(BorderFactory.createLineBorder(Color.BLUE, 5));
        try
        {
            image = ImageIO.read(new File(getClass().getResource("/userinterface/water-background.jpg").toURI()));
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    
    }
    
    
     @Override
    public Dimension getPreferredSize()
    {
        return (new Dimension(300, 300));
    }

    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        g.drawImage(image, 0, 0, this);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        manageEmployeeJButton = new javax.swing.JButton();
        manageOrganizationJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1000, 800));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 102));
        jLabel1.setText("View Water Quality Analysis");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 160, 376, -1));

        manageEmployeeJButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        manageEmployeeJButton.setForeground(new java.awt.Color(0, 0, 153));
        manageEmployeeJButton.setText("View Water Quality Reasons");
        manageEmployeeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEmployeeJButtonActionPerformed(evt);
            }
        });
        add(manageEmployeeJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 410, 210, 30));

        manageOrganizationJButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        manageOrganizationJButton.setForeground(new java.awt.Color(0, 0, 153));
        manageOrganizationJButton.setText("View Water Quality Effects");
        manageOrganizationJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageOrganizationJButtonActionPerformed(evt);
            }
        });
        add(manageOrganizationJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 320, 210, 30));

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setForeground(new java.awt.Color(102, 0, 102));
        enterpriseLabel.setText("Enterprise:");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 240, 120, 30));

        valueLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        valueLabel.setForeground(new java.awt.Color(204, 0, 0));
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 240, 310, 30));

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Heavy", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 0, 204));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("WATER QUALITY  MANAGEMENT SYSTEM ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 90));
    }// </editor-fold>//GEN-END:initComponents

    private void manageEmployeeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageEmployeeJButtonActionPerformed

      chartForReq();
    }//GEN-LAST:event_manageEmployeeJButtonActionPerformed

    private void manageOrganizationJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageOrganizationJButtonActionPerformed

       createChart();
    }//GEN-LAST:event_manageOrganizationJButtonActionPerformed
    
     private void chartForReq(){
     try{
     DefaultCategoryDataset vitalSignDataset=new DefaultCategoryDataset();
        
        int countReq =0;
        int countLR =0; 
        int countMain =0;
         for(Enterprise etr: ntwk.getEnterpriseDirectory().getEnterpriseList()){
               if(etr instanceof MunicipalCorporationEnterprise)
               {
               for(Organization org: etr.getOrganizationDirectory().getOrganizationList()){
                   if( org instanceof SurveyorOrganization){
                       SurveyorOrganization s = (SurveyorOrganization)org;
                   for(WorkRequest v: s.getWorkQueue().getWorkRequestList()){
                       if (v instanceof SurveyorVisitWorkRequest )
                       {
                          // System.out.println("person name "+d);
                        
                        countReq = countReq+1; 
                                           
                       }

                          }
                   }
                   if( org instanceof MaintenanceOrganization){
                       MaintenanceOrganization s = (MaintenanceOrganization)org;
                   for(WorkRequest v: s.getWorkQueue().getWorkRequestList()){
                       if (v instanceof LineDefectMaintenanceWorkRequest )
                       {
                          // System.out.println("person name "+d);
                        
                        countLR = countLR+1; 
                                           
                       }
                       if (v instanceof QualityMaintenanceWorkRequest )
                       {
                          // System.out.println("person name "+d);
                        
                        countMain = countMain+1; 
                                           
                       }
                       
                          }
                   }
                   
                   }
               }
               }
         
        
            
         int unsolved = countReq -countLR-countMain;
         vitalSignDataset.addValue(countReq,"Total Defects",new Date());
             vitalSignDataset.addValue(unsolved,"Unsolved Defects",new Date());
            vitalSignDataset.addValue(countLR,"Line Defects",new Date());
         vitalSignDataset.addValue(countMain,"Maintenance Defects", new Date());
         
        JFreeChart readingsChart= ChartFactory.createBarChart3D("Total Defects of Water Quality", "Untill Today", "Rate", vitalSignDataset, PlotOrientation.VERTICAL, true, false, false);
        readingsChart.setBackgroundPaint(Color.white);
        CategoryPlot vitalSignChartPlot = readingsChart.getCategoryPlot();
        vitalSignChartPlot.setBackgroundPaint(Color.lightGray);    
        
        CategoryAxis vitalSignDomainAxis = vitalSignChartPlot.getDomainAxis();
        vitalSignDomainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );
        
        NumberAxis vitalSignRangeAxis = (NumberAxis) vitalSignChartPlot.getRangeAxis();
        vitalSignRangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        
        ChartFrame chartFrame = new ChartFrame("Chart", readingsChart);
        chartFrame.setVisible(true);
        chartFrame.setSize(600, 520);
        
     
     
     }catch (Exception e){
                 JOptionPane.showMessageDialog(this, "No Data Found","ERROR",JOptionPane.ERROR_MESSAGE);
                 return; 
        }
     
     }
    
    
     private void createChart()
    {    try{
        DefaultCategoryDataset vitalSignDataset=new DefaultCategoryDataset();
        ArrayList<WaterQualityMeasurement> measure1= new ArrayList<WaterQualityMeasurement> ();
        int countMeasure =0;
        int countVs =0;
         for(Enterprise etr: ntwk.getEnterpriseDirectory().getEnterpriseList()){
               if(etr instanceof HouseholdCommunityEnterprise)
               {
               for(Organization org: etr.getOrganizationDirectory().getOrganizationList()){
                   if( org instanceof ResidentOrganization){
                   for(Residents d:((ResidentOrganization)org).getResidentDirectory().getResidentList() ){
                       if (d instanceof Residents )
                       {
                          // System.out.println("person name "+d);
                        
                           for(WaterQualityMeasurement m: d.getFamily().getMeasurementList().getHistory()){
                           measure1.add(m);
                          // System.out.println("reading "+m.getStatus()+" Abnormal");
                           if(m.getStatus().equalsIgnoreCase("Abnormal"))
                           {countMeasure = countMeasure+1;
                               //System.out.println(" Count "+countReq);
                           }
                           }
                           
                           for(VitalSign v: d.getVitalSignHistory().getHistory()){
                          
                           if(v.getStatus().equalsIgnoreCase("Abnormal"))
                           {countVs = countVs+1;}
                           }
                       
                       
                       
                       }

                          }
                   }
                   }
               }
               }
         
        
            
        
            vitalSignDataset.addValue(countMeasure,"Count of Abnoramal Water Quality",new Date());
            vitalSignDataset.addValue(countVs,"Abnormal Vital Signs", new Date());
         
        
        JFreeChart readingsChart= ChartFactory.createBarChart3D(" Effect of Water Quality", "Time Stamp", "Rate", vitalSignDataset, PlotOrientation.VERTICAL, true, false, false);
        readingsChart.setBackgroundPaint(Color.white);
        CategoryPlot vitalSignChartPlot = readingsChart.getCategoryPlot();
        vitalSignChartPlot.setBackgroundPaint(Color.lightGray);    
        
        CategoryAxis vitalSignDomainAxis = vitalSignChartPlot.getDomainAxis();
        vitalSignDomainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );
        
        NumberAxis vitalSignRangeAxis = (NumberAxis) vitalSignChartPlot.getRangeAxis();
        vitalSignRangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        
        ChartFrame chartFrame = new ChartFrame("Chart", readingsChart);
        chartFrame.setVisible(true);
        chartFrame.setSize(600, 520);
        }catch (Exception e){
                 JOptionPane.showMessageDialog(this, "No Data Found","ERROR",JOptionPane.ERROR_MESSAGE);
                 return; 
        }
                
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton manageEmployeeJButton;
    private javax.swing.JButton manageOrganizationJButton;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
    
}
