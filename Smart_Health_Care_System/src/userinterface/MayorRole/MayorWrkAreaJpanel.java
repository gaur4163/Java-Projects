/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.MayorRole;

import Business.Enterprise.Enterprise;
import Business.Enterprise.ResidentsEnterprise;
import Business.HealthCare.VitalSign;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Person.Person;
import Business.SeniorPerson.SeniorPerson;
import Business.USA_Smart_HealthCare;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AskFunds;
import Business.WorkQueue.WorkRequest;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Apoorva
 */
public class MayorWrkAreaJpanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private UserAccount account;
    private Organization organization;
    private Enterprise enterprise;
    private USA_Smart_HealthCare business;
    private Network network;
    private BufferedImage image;
    /**
     * Creates new form PatientWorkArea
     */
    public MayorWrkAreaJpanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, USA_Smart_HealthCare business,
            Network network) {
        initComponents();
        try{this.userProcessContainer= userProcessContainer;
        this.account = account;
        this.organization = organization;
        this.enterprise= enterprise;
        this.business= business;
        this.network = network;
        setImg();   }
        catch(Exception x)
        { JOptionPane.showMessageDialog(this, "There is some problem please try again later");
        } 
       
    }
    
     public void setImg(){
    setOpaque(true);
        setBorder(BorderFactory.createLineBorder(Color.BLUE, 5));
        try
        {
            image = ImageIO.read(new File(getClass().getResource("/userinterface/elderCare.jpg").toURI()));
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    
    }
    
    
     @Override
    public Dimension getPreferredSize()
    {
        return (new Dimension(300, 300));
    }

    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        g.drawImage(image, 0, 0, this);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        monitorHealthjButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        quickTipjButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        quickTipjButton1 = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 153));
        jLabel1.setText("Senior Citizen Health Care Authority");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 290, -1, -1));

        monitorHealthjButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        monitorHealthjButton.setForeground(new java.awt.Color(51, 0, 51));
        monitorHealthjButton.setText("Analyse Elderly Citizens Health in City");
        monitorHealthjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monitorHealthjButtonActionPerformed(evt);
            }
        });
        add(monitorHealthjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 470, 280, 70));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 0, 153));
        jLabel2.setText("We are here to serve you");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 220, -1, -1));

        quickTipjButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        quickTipjButton.setForeground(new java.awt.Color(51, 0, 51));
        quickTipjButton.setText("Donation Status in City");
        quickTipjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickTipjButtonActionPerformed(evt);
            }
        });
        add(quickTipjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 570, 280, 70));

        jLabel3.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 0, 102));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Smart Health Care System");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 100));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 0, 153));
        jLabel4.setText("Welcome to Speed Help");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 180, -1, -1));

        quickTipjButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        quickTipjButton1.setForeground(new java.awt.Color(51, 0, 51));
        quickTipjButton1.setText("Donation Provided to City");
        quickTipjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickTipjButton1ActionPerformed(evt);
            }
        });
        add(quickTipjButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 360, 280, 70));
    }// </editor-fold>//GEN-END:initComponents

    private void quickTipjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickTipjButtonActionPerformed

        try{
        DefaultCategoryDataset donationDataset=new DefaultCategoryDataset();
         ArrayList<AskFunds> donationList=new ArrayList<AskFunds>();
          for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            if((request instanceof AskFunds) &&((AskFunds)request).isApproved()){
            donationList.add((AskFunds)request);
            }}
        /*At least 2  records needed to show chart */
        if (donationList.isEmpty() || donationList.size() == 1) {
            JOptionPane.showMessageDialog(this, "No donations or only one donation found. At least 2 records needed to show chart!", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        int sumReq=0;
        int legi=0;
        int nonlegi =0;
        int procesed=0;
        int pending = 0;
        int surveydone=0;
        int approved =0;
       for(AskFunds asf:donationList){
           sumReq =sumReq+ asf.getAmount();
           if(asf.isLegitimate()){
               
           legi = legi+1;
           
           }else {
                System.out.println("in non legi ");
                nonlegi = nonlegi+1;}
           if(asf.isApproved())
           {approved = approved+1;
            System.out.println("in app ");
           }
           if(asf.isSurveyDone()){surveydone = surveydone+1;
            System.out.println("in surveydone ");}
           if(asf.getStatus().equalsIgnoreCase("Completed")){
           procesed = procesed +1;
           } else {pending = pending+1;}
     //   
  }
       
      // System.out.println("in "+legi+" "+nonlegi+" "+sumReq +" "+approved+" "+pending+" "+ procesed+" "+surveydone);
       // donationDataset.addValue(sumReq,"Amount Requested", new Date());
        donationDataset.addValue(legi,"Legitimate Requests", new Date());
        donationDataset.addValue(nonlegi,"NonLegitimate Requests", new Date());
        donationDataset.addValue(approved,"Approved Requests", new Date());
        donationDataset.addValue(surveydone,"Survey Completed", new Date());
        donationDataset.addValue(pending,"Pending Requests", new Date());
        donationDataset.addValue(procesed,"Completed Request", new Date());
        JFreeChart dontionChart= ChartFactory.createBarChart3D("Dontion Chart", "Time Stamp", "Rate", donationDataset, PlotOrientation.VERTICAL, true, false, false);
        dontionChart.setBackgroundPaint(Color.white);
        
        CategoryPlot vitalSignChartPlot = dontionChart.getCategoryPlot();
        vitalSignChartPlot.setBackgroundPaint(Color.white);    
        
        CategoryAxis vitalSignDomainAxis = vitalSignChartPlot.getDomainAxis();
        vitalSignDomainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );
        
        NumberAxis vitalSignRangeAxis = (NumberAxis) vitalSignChartPlot.getRangeAxis();
        vitalSignRangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        
        
        
        GradientPaint gradientpaint1 = new GradientPaint(0.0F, 0.0F, new Color(100, 225, 10), 0.0F, 0.0F, new Color(136, 136, 255));
        GradientPaint gradientpaint2 = new GradientPaint(0.0F, 0.0F, new Color(205, 92, 92), 0.0F, 0.0F, new Color(136, 136, 255));
     
 
        BarRenderer r = (BarRenderer) dontionChart.getCategoryPlot().getRenderer();
    r.setSeriesPaint(0, gradientpaint1);
    r.setSeriesPaint(1, gradientpaint1);
    r.setSeriesPaint(2, gradientpaint2);
        
        ChartFrame chartFrame = new ChartFrame("Chart", dontionChart);
        chartFrame.setVisible(true);
        chartFrame.setSize(600, 520);   }
        catch(Exception x)
        { JOptionPane.showMessageDialog(this, "There is some problem please try again later");
        }  
    }//GEN-LAST:event_quickTipjButtonActionPerformed

    private void monitorHealthjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monitorHealthjButtonActionPerformed
      try{ DefaultCategoryDataset donationDataset=new DefaultCategoryDataset();
         ArrayList<SeniorPerson> patList=new ArrayList<SeniorPerson>();
          for(Enterprise etr : network.getEnterpriseDirectory().getEnterpriseList()){
          System.out.println("here "+network+" here "+etr);
          if(etr instanceof ResidentsEnterprise)
          {
          for(Organization org:etr.getOrganizationDirectory().getOrganizationList()){
          if(org instanceof PatientOrganization){
              
              System.out.println("here "+org);
              for(Person p: ((PatientOrganization)org).getPersonDir().getSerPersonList()){
          patList.add((SeniorPerson)p);
              System.out.println("here "+p);}
        }}
        }}
        int bp=0; int rr=0; int hr=0; int w=0; int st=0; int sh=0; int sug=0;
          
          for(SeniorPerson per : patList)
          { 
              System.out.println("person "+per);
              
              if(!per.getVitalSignList().getHistory().isEmpty()){
              int ind = per.getVitalSignList().getHistory().size()-1;
              VitalSign vs = per.getVitalSignList().getHistory().get(ind);
            
            
                
                System.out.println("here");
              if( vs.getBloodPressure()<90|| vs.getBloodPressure()>=135) 
                   {        bp++;
                   }
                   
                    if( vs.getHeartRate()<60 || vs.getHeartRate()>=100) 
                   {        hr++;
                   }
                    if(vs.getRespiratoryRate()<12|| vs.getRespiratoryRate()>=28) 
                   {       rr++;
                   }
                    if(vs.getWeight()<25|| vs.getWeight() >=45) 
                   {        w++;
                   }
                    if(vs.getSleepinghours()<6|| vs.getSleepinghours()>=10) 
                   {        sh++;
                   }
                    if(vs.getSugarLevel()<72|| vs.getSugarLevel()>=108) 
                   {       sug++;
                   }
                   
                    if(vs.getStepCount()<50|| vs.getStepCount()>=1000) 
                   {        st++;
                   }
            }}
          
          Date d = new Date();
           
        donationDataset.addValue(rr,"Respiration Rate",d);
        donationDataset.addValue(hr,"Heart Rate",d);
        donationDataset.addValue(bp,"Blood Pressure",d);
        donationDataset.addValue(sug,"Sugar Level",d);
        donationDataset.addValue(w,"Weight",d);
        donationDataset.addValue(st,"Daily Activity",d);
        donationDataset.addValue(sh,"Sleeping Hours",new Date());
        
        JFreeChart dontionChart= ChartFactory.createBarChart3D("Senior Citizens with abnormal Vital Signs", "Categories", "Number Of Citizen in a category", donationDataset, PlotOrientation.VERTICAL, true, false, false);
        dontionChart.setBackgroundPaint(Color.white);
        
        CategoryPlot vitalSignChartPlot = dontionChart.getCategoryPlot();
        vitalSignChartPlot.setBackgroundPaint(Color.white);    
        
        CategoryAxis vitalSignDomainAxis = vitalSignChartPlot.getDomainAxis();
        vitalSignDomainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );
        
        NumberAxis vitalSignRangeAxis = (NumberAxis) vitalSignChartPlot.getRangeAxis();
        vitalSignRangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        
        
        ChartFrame chartFrame = new ChartFrame("Chart", dontionChart);
        chartFrame.setVisible(true);
        chartFrame.setSize(600, 520);    }
        catch(Exception x)
        { JOptionPane.showMessageDialog(this, "There is some problem please try again later");
        } 
    }//GEN-LAST:event_monitorHealthjButtonActionPerformed

    private void quickTipjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickTipjButton1ActionPerformed
      
        try{
        DefaultCategoryDataset donationDataset=new DefaultCategoryDataset();
         ArrayList<AskFunds> donationList=new ArrayList<AskFunds>();
          for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            if((request instanceof AskFunds) &&((AskFunds)request).isApproved()){
            donationList.add((AskFunds)request);
            }}
        /*At least 2  records needed to show chart */
        if (donationList.isEmpty() || donationList.size() == 1) {
            JOptionPane.showMessageDialog(this, "No donations or only one donation found. At least 2 records needed to show chart!", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
      
       for(AskFunds asf:donationList){
           donationDataset.addValue(asf.getAmount(),"Amount Requested", asf.getSurveyDate());
     //   
  }
       
      // System.out.println("in "+legi+" "+nonlegi+" "+sumReq +" "+approved+" "+pending+" "+ procesed+" "+surveydone);
       //
       JFreeChart dontionChart= ChartFactory.createBarChart3D("Dontion Chart", "Time Stamp", "Rate", donationDataset, PlotOrientation.VERTICAL, true, false, false);
        dontionChart.setBackgroundPaint(Color.white);
        
        CategoryPlot vitalSignChartPlot = dontionChart.getCategoryPlot();
        vitalSignChartPlot.setBackgroundPaint(Color.white);    
        
        CategoryAxis vitalSignDomainAxis = vitalSignChartPlot.getDomainAxis();
        vitalSignDomainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );
        
        NumberAxis vitalSignRangeAxis = (NumberAxis) vitalSignChartPlot.getRangeAxis();
        vitalSignRangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        
        
        
        GradientPaint gradientpaint1 = new GradientPaint(0.0F, 0.0F, new Color(100, 225, 10), 0.0F, 0.0F, new Color(136, 136, 255));
        GradientPaint gradientpaint2 = new GradientPaint(0.0F, 0.0F, new Color(205, 92, 92), 0.0F, 0.0F, new Color(136, 136, 255));
     
 
        BarRenderer r = (BarRenderer) dontionChart.getCategoryPlot().getRenderer();
    r.setSeriesPaint(0, gradientpaint1);
    r.setSeriesPaint(1, gradientpaint1);
    r.setSeriesPaint(2, gradientpaint2);
        
        ChartFrame chartFrame = new ChartFrame("Chart", dontionChart);
        chartFrame.setVisible(true);
        chartFrame.setSize(600, 520);   }
        catch(Exception x)
        { JOptionPane.showMessageDialog(this, "There is some problem please try again later");
        }  
                                                  

   // TODO add your handling code here:
    }//GEN-LAST:event_quickTipjButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton monitorHealthjButton;
    private javax.swing.JButton quickTipjButton;
    private javax.swing.JButton quickTipjButton1;
    // End of variables declaration//GEN-END:variables
}