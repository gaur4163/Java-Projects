/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Patient;

import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.HealthCare.VitalSign;
import Business.HealthCare.VitalSignHistory;
import Business.Network.Network;
import Business.Organization.CareTakerOrganization;
import Business.Organization.Organization;
import Business.SeniorPerson.SeniorPerson;
import Business.USA_Smart_HealthCare;
import Business.UserAccount.UserAccount;
import Business.Utils.MyIntegerVerifier;
import Business.WorkQueue.AlertCaretaker;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Apoorva
 */
public class RecordVitalSigns extends javax.swing.JPanel {

    /**
     * Creates new form RecordVitalSigns
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private Network network;
    private USA_Smart_HealthCare business;
    private BufferedImage image;
    
    public RecordVitalSigns(JPanel userProcessContainer, UserAccount account,USA_Smart_HealthCare business,Network network) {
        initComponents();
       try{ this.userProcessContainer = userProcessContainer;
        this.business= business;
        this.account = account;
        this.network = network;
        popData();
        setImg();
        MyIntegerVerifier myIntegerVerifier= new MyIntegerVerifier();
        RespRateTxt.setInputVerifier(myIntegerVerifier); 
        BpTxt.setInputVerifier(myIntegerVerifier);
        WeightTxt.setInputVerifier(myIntegerVerifier);
        stepCountText.setInputVerifier(myIntegerVerifier);
        hourSleptTxt.setInputVerifier(myIntegerVerifier);
        sugarTxt.setInputVerifier(myIntegerVerifier);
        HeartRtTxt.setInputVerifier(myIntegerVerifier);
           }
        catch(Exception x)
        { JOptionPane.showMessageDialog(this, "There is some problem please try again later");
        } 
        
        
    }

    /**
     * 
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        createJButton = new javax.swing.JButton();
        RespRateTxt = new javax.swing.JFormattedTextField();
        HeartRtTxt = new javax.swing.JFormattedTextField();
        BpTxt = new javax.swing.JFormattedTextField();
        WeightTxt = new javax.swing.JFormattedTextField();
        backBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        label1 = new javax.swing.JLabel();
        statusTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        sugarTxt = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        hourSleptTxt = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        VitalSignsJtable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        stepCountText = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setForeground(new java.awt.Color(0, 51, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 204));
        jLabel3.setText("Heart Rate(per min)");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 430, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 204));
        jLabel4.setText("Systolic Blood Pressure");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 390, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 51, 204));
        jLabel5.setText("Body Mass Index(BMI)");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 430, -1, -1));

        createJButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        createJButton.setForeground(new java.awt.Color(51, 0, 51));
        createJButton.setText("Submit");
        createJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createJButtonActionPerformed(evt);
            }
        });
        add(createJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 530, 90, 30));

        RespRateTxt.setForeground(new java.awt.Color(0, 51, 204));
        RespRateTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        add(RespRateTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 350, 130, 20));

        HeartRtTxt.setForeground(new java.awt.Color(0, 51, 204));
        HeartRtTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        add(HeartRtTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 430, 130, 20));

        BpTxt.setForeground(new java.awt.Color(0, 51, 204));
        BpTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        add(BpTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 390, 130, 20));

        WeightTxt.setForeground(new java.awt.Color(0, 51, 204));
        WeightTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        add(WeightTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 430, 130, 20));

        backBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, 90, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 51, 204));
        jLabel6.setText("Respiratory Rate(per min)");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 350, -1, -1));

        label1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        label1.setForeground(new java.awt.Color(0, 51, 204));
        label1.setText("Status");
        add(label1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 470, -1, -1));

        statusTxt.setEditable(false);
        statusTxt.setForeground(new java.awt.Color(0, 51, 204));
        statusTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusTxtActionPerformed(evt);
            }
        });
        add(statusTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 470, 130, 20));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 51, 204));
        jLabel7.setText("Sugar Level(mg/DL)");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 350, -1, -1));

        sugarTxt.setForeground(new java.awt.Color(0, 51, 204));
        sugarTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        add(sugarTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 350, 130, 20));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 51, 204));
        jLabel8.setText("Hours Slept");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 390, -1, -1));

        hourSleptTxt.setForeground(new java.awt.Color(0, 51, 204));
        hourSleptTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        add(hourSleptTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 390, 130, -1));

        VitalSignsJtable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        VitalSignsJtable.setForeground(new java.awt.Color(0, 51, 204));
        VitalSignsJtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Respiration Rate", "Blood Pressure", "BMI", "Sugar Level", "Hours Slept", "Heart Rate", "step count", "Status"
            }
        ));
        jScrollPane1.setViewportView(VitalSignsJtable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, 690, 160));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 51, 204));
        jLabel9.setText("Step Count");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 470, -1, -1));

        stepCountText.setForeground(new java.awt.Color(0, 51, 204));
        stepCountText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        add(stepCountText, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 470, 130, 20));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 0, 153));
        jLabel2.setText("Record Vital Signs");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, -1, -1));

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Smart Health Care System");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 100));
    }// </editor-fold>//GEN-END:initComponents
        
     public void setImg(){
    setOpaque(true);
        setBorder(BorderFactory.createLineBorder(Color.BLUE, 5));
        try
        {
            image = ImageIO.read(new File(getClass().getResource("/userinterface/elderCare.jpg").toURI()));
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    
    }
    
    
     @Override
    public Dimension getPreferredSize()
    {
        return (new Dimension(300, 300));
    }

    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        g.drawImage(image, 0, 0, this);
    }
    
    public void popData(){
    SeniorPerson person = (SeniorPerson) account.getSeniorPerson();
   
    
     DefaultTableModel model = (DefaultTableModel) VitalSignsJtable.getModel();
        
        model.setRowCount(0);
        
        for (VitalSign vitalSign : person.getVitalSignList().getHistory()){
                      
            Object[] row = new Object[9];
            row[1] = vitalSign.getRespiratoryRate();
            row[2] = vitalSign.getBloodPressure();
            row[0] = vitalSign.getTimestamp();
            row[3] = vitalSign.getWeight();
            row[4] = vitalSign.getSugarLevel();
            row[5] = vitalSign.getSleepinghours();
            row[6] = vitalSign.getHeartRate();
            row[7] = vitalSign.getStepCount();
            row[8] = vitalSign.getStatus();
            model.addRow(row);
        }
    
    }
    
    private void createJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createJButtonActionPerformed

        try{
            SeniorPerson person = (SeniorPerson) account.getSeniorPerson();
            
           //System.out.println("in record: "+person);
                int heartRate;
                int respRate;
                int bloodPressure;
                int weight;
               int stepCount;
                 int sugarLevel;
                 int sleepinghours;
                String status;
               
                
                VitalSignHistory vitalSignList1 = person.getVitalSignList();
                VitalSign vitalSignObj = vitalSignList1.createAndAddVitalSign(); // getting a object first and then setting its parameters

                // Factory Desgin pattern

                if ( HeartRtTxt.getText().equals("") || BpTxt.getText().equals("") ||RespRateTxt.getText().equals("") || WeightTxt.getText().equals("")
                       || stepCountText.getText().equals("")|| sugarTxt.getText().equals("")||hourSleptTxt.getText().equals(""))
                {  JOptionPane.showMessageDialog(null, "Above fields can not be empty");  }
                else {
                    
                    Boolean isNormal = true;
                      ArrayList<String> abnormalvs = new ArrayList<String>();                  
                    heartRate = Integer.parseInt(HeartRtTxt.getText());
                    bloodPressure = Integer.parseInt(BpTxt.getText());
                    respRate = Integer.parseInt(RespRateTxt.getText());
                    weight = Integer.parseInt(WeightTxt.getText());
                    sleepinghours = Integer.parseInt(hourSleptTxt.getText());
                    stepCount= Integer.parseInt(stepCountText.getText());
                   sugarLevel=Integer.parseInt(sugarTxt.getText());
                    
                   if(bloodPressure<90|| bloodPressure>=135) 
                   {        isNormal = false;   
                            abnormalvs.add("abnormal blood Pressure") ;  
                            BpTxt.setBackground(Color.red);
                   }
                   
                    if(heartRate<60|| heartRate>=100) 
                   {        isNormal = false;   
                            abnormalvs.add("abnormal heart Rate") ; 
                            HeartRtTxt.setBackground(Color.red);
                   }
                    if(respRate<12|| respRate>=28) 
                   {        isNormal = false;   
                            abnormalvs.add("abnormal Respiratory Rate") ; 
                            RespRateTxt.setBackground(Color.red);
                   }
                    if(weight<25|| weight>=45) 
                   {        isNormal = false;
                            if  (weight<25){
                            abnormalvs.add("Under Weight") ;  } 
                             else   if  (weight>=45){
                            abnormalvs.add("Obese") ;  } 
                            WeightTxt.setBackground(Color.red);
                   }
                    if(sleepinghours<6|| sleepinghours>=10) 
                   {        isNormal = false;   
                            abnormalvs.add("abnormal sleeping pattern") ; 
                            hourSleptTxt.setBackground(Color.red);
                   }
                    if(sugarLevel<72|| sugarLevel>=108) 
                   {        isNormal = false;   
                            abnormalvs.add("abnormal sugar level") ; 
                            sugarTxt.setBackground(Color.red);
                   }
                   
                    if(stepCount<50|| stepCount>=1000) 
                   {        isNormal = false;   
                             if  (stepCount<50){
                            abnormalvs.add("very little activity") ;  } 
                             else   if  (stepCount>=1000){
                            abnormalvs.add("Too much activity") ;  } 
                             stepCountText.setBackground(Color.red);
                   }
                   
                   
                    vitalSignObj.setBloodPressure(bloodPressure);
                    vitalSignObj.setHeartRate(heartRate);
                    vitalSignObj.setRespiratoryRate(respRate);
                    vitalSignObj.setWeight(weight);
                    vitalSignObj.setSleepinghours(sleepinghours);
                    vitalSignObj.setStepCount(stepCount);
                    vitalSignObj.setSugarLevel(sugarLevel);
                    
                     String msg ="";
                    for(String s :abnormalvs){
                        
                        msg = msg +" , "+ s;
                    }
                    JOptionPane.showMessageDialog(this, "Your Vital Sign is recorded ");
                   
                    if(isNormal){vitalSignObj.setStatus("Normal");}
                    else{
                        vitalSignObj.setStatus("Abnormal");
                   JOptionPane.showMessageDialog(this, "Here are problems recorded ");
                       // System.out.println("Here are problems recorded "+msg);
                        alertOthers(vitalSignObj,msg);
                    }
                    statusTxt.setText(vitalSignObj.getStatus());
                    
                   popData();
                    
                    // TODO add your handling code here:

                }   
                  }
        catch(Exception x)
        { JOptionPane.showMessageDialog(this, "There is some problem please try again later");
        } 
                // TODO add your handling code here:
    }//GEN-LAST:event_createJButtonActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void statusTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusTxtActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField BpTxt;
    private javax.swing.JFormattedTextField HeartRtTxt;
    private javax.swing.JFormattedTextField RespRateTxt;
    private javax.swing.JTable VitalSignsJtable;
    private javax.swing.JFormattedTextField WeightTxt;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton createJButton;
    private javax.swing.JFormattedTextField hourSleptTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label1;
    private javax.swing.JTextField statusTxt;
    private javax.swing.JFormattedTextField stepCountText;
    private javax.swing.JFormattedTextField sugarTxt;
    // End of variables declaration//GEN-END:variables

  

    public void alertOthers(VitalSign vitalSignObj, String msg) {
       
        try{
        AlertCaretaker request = new AlertCaretaker();
        request.setMessage("This is automatic alert!!! generated from reports of "+account.getPerson().getName());
        request.setAlert(msg);
        request.setSign(vitalSignObj);
        request.setSender(account);
        request.setStatus("Sent");
        Organization org = null;
      //  System.out.println(" network "+network);
        for (Enterprise enterp: network.getEnterpriseDirectory().getEnterpriseList() ){
            if (enterp instanceof HospitalEnterprise)
                {  if(enterp==account.getSeniorPerson().getHospital())
                {
                   // System.out.println("enterprise name " +enterp);
                    ((HospitalEnterprise)enterp).getCriticalPerson().addPatient(account.getSeniorPerson());
                }}
            for (Organization organization : enterp.getOrganizationDirectory().getOrganizationList()){

             //   System.out.println(" organization "+organization);
                if (organization instanceof CareTakerOrganization){
                    org = organization;
                   // System.out.println("checking isntance");
                    break;
                }
            }}
            if (org!=null){
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
            }
               }
        catch(Exception x)
        { JOptionPane.showMessageDialog(this, "There is some problem please try again later");
        } 
    }
}
