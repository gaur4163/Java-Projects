/*
 * BrowseProducts.java
 *
 * Created on October 10, 2008, 9:10 AM
 */
package userinterface.Patient;


import Business.Enterprise.Enterprise;
import Business.Enterprise.SmartMedicineDeliveryEnterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.SeniorPerson.SeniorPerson;
import Business.Store.MasterOrderCatalog;
import Business.Store.MedicineProduct;
import Business.Store.Order;
import Business.Store.OrderItem;
import Business.Store.Store;
import Business.Store.StoreDirectory;
import Business.USA_Smart_HealthCare;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;

import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author Rushabh
 */
public class ByeProductsJPanel extends javax.swing.JPanel {
private JPanel userProcessContainer;
private MasterOrderCatalog masterOrderCatalog;
private StoreDirectory supplierDirectory;
private SeniorPerson customer;
private Order order;
private Boolean isCheckedOut = false;
private UserAccount account;
    private Organization organization;
    private Enterprise enterprise;
    private USA_Smart_HealthCare business;
    private Network network;
    private BufferedImage image;


    /** Creates new form BrowseProducts */
    public ByeProductsJPanel(JPanel userProcessContainer,UserAccount account, Organization organization, Enterprise enterprise, USA_Smart_HealthCare business,
            Network network) {
        initComponents();
       try{
           this.userProcessContainer= userProcessContainer;
       
        this.account = account;
        this.organization = organization;
        this.enterprise= enterprise;
        this.business= business;
        this.network = network;
        this.userProcessContainer = userProcessContainer;
        this.customer=account.getSeniorPerson();
      //  this.masterOrderCatalog = masterOrderCatalog;
        //this.supplierDirectory= supplierDirectory;
//        customer = cust;
//        this.salesPerson = salesPerson;
//        jLabel3.setText(salesPerson.getName());
//         jLabel9.setText(String.valueOf(customer.getCustomerId()));
//          jLabel11.setText(customer.getName());
        populateSuppcomboBox();
        setImg();
       }
        catch(Exception x)
        { JOptionPane.showMessageDialog(this, "There is some problem please try again later");
        } 
    }

     public void setImg(){
    setOpaque(true);
        setBorder(BorderFactory.createLineBorder(Color.BLUE, 5));
        try
        {
            image = ImageIO.read(new File(getClass().getResource("/userinterface/elderCare.jpg").toURI()));
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    
    }
    
    
     @Override
    public Dimension getPreferredSize()
    {
        return (new Dimension(300, 300));
    }

    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        g.drawImage(image, 0, 0, this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        suppComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        addtoCartButton6 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        btnSearchProduct = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnModifyQuantity = new javax.swing.JButton();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        txtSearchKeyWord = new javax.swing.JTextField();
        txtNewQuantity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(750, 511));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        productTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Product Id", "Price", "Avail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 640, 110));

        suppComboBox1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        suppComboBox1.setForeground(new java.awt.Color(0, 51, 204));
        suppComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppComboBox1ActionPerformed(evt);
            }
        });
        add(suppComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 200, 260, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 204));
        jLabel1.setText("Store");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 170, 110, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 204));
        jLabel2.setText("Medicines Available");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 230, 240, 20));

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 620, 90, -1));

        addtoCartButton6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addtoCartButton6.setForeground(new java.awt.Color(51, 0, 51));
        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });
        add(addtoCartButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 400, -1, -1));

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        add(quantitySpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 400, 40, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 51, 204));
        jLabel5.setText("Quantity:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 400, -1, -1));

        btnSearchProduct.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSearchProduct.setForeground(new java.awt.Color(51, 0, 51));
        btnSearchProduct.setText("Search Product");
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });
        add(btnSearchProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 200, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 51, 204));
        jLabel7.setText("Item in cart");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 390, 80, 40));

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 440, 640, 120));

        btnModifyQuantity.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnModifyQuantity.setForeground(new java.awt.Color(51, 0, 51));
        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });
        add(btnModifyQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 580, -1, -1));

        btnRemoveOrderItem.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnRemoveOrderItem.setForeground(new java.awt.Color(51, 0, 51));
        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });
        add(btnRemoveOrderItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 580, 90, -1));

        btnCheckOut.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCheckOut.setForeground(new java.awt.Color(51, 0, 51));
        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });
        add(btnCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 580, 100, -1));

        txtSearchKeyWord.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtSearchKeyWord.setForeground(new java.awt.Color(0, 51, 204));
        add(txtSearchKeyWord, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 200, 110, -1));

        txtNewQuantity.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtNewQuantity.setForeground(new java.awt.Color(0, 51, 204));
        add(txtNewQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 580, 140, 20));

        jLabel3.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 0, 102));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Smart Health Care System");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 100));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 0, 153));
        jLabel4.setText("Purchase Medicines");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void suppComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppComboBox1ActionPerformed
       populateProductTable();
        // TODO add your handling code here:
        
    }//GEN-LAST:event_suppComboBox1ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
      try{  if (order.getOrderItemList().size()>0)
        {
            ArrayList<OrderItem> orderList = order.getOrderItemList();
            for(OrderItem oi: orderList){
            MedicineProduct p = oi.getProduct();
            p.setAvailability(oi.getQuantity()+p.getAvailability());
            
            }
        order.getOrderItemList().removeAll(orderList);
        }
        userProcessContainer.remove(this);
        Component [] componentArray = userProcessContainer.getComponents();
        Component wc = componentArray[componentArray.length-1];
        ViewOrderMedJPanel mws = (ViewOrderMedJPanel) wc;
        mws.populate();
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
           }
        catch(Exception x)
        { JOptionPane.showMessageDialog(this, "There is some problem please try again later");
        } 
    }//GEN-LAST:event_btnBackActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
     try{   int selectRow = productTable.getSelectedRow();
        MedicineProduct selectedProduct;
        int salesPrice=0;
        
        if(selectRow<0){
        JOptionPane.showMessageDialog(this,"Please select a row", "Warning", JOptionPane.ERROR_MESSAGE);
        return;}
        else {
        
        selectedProduct  = (MedicineProduct)productTable.getValueAt(selectRow, 0);
         salesPrice =selectedProduct.getPrice();
        }
        
        int purchaseQuantity = (Integer)quantitySpinner.getValue();
        if(purchaseQuantity<=0){
        JOptionPane.showMessageDialog(this,"Please enter quantity", "Warning", JOptionPane.ERROR_MESSAGE);
        return;
        }
        else if(purchaseQuantity<=selectedProduct.getAvailability()){
        boolean alreadyPresent = false;
            
        for(OrderItem oi: order.getOrderItemList())
            {
                if (oi.getProduct()==selectedProduct)
                {
                int oldAvailability = selectedProduct.getAvailability();
                int newAvailability = oldAvailability-purchaseQuantity;
                selectedProduct.setAvailability(newAvailability);
                oi.setQuantity( purchaseQuantity +oi.getQuantity());
                
                populateProductTable();
                populateOrderTable();
                alreadyPresent = true;
                break;
                }
                
            }
        
        
            if(!alreadyPresent)
            {
            int oldAvailability = selectedProduct.getAvailability();
            int newAvailability = oldAvailability-purchaseQuantity;
            selectedProduct.setAvailability(newAvailability);
            order.addOrderItem(selectedProduct, purchaseQuantity, salesPrice);
            populateProductTable();
            populateOrderTable();
            alreadyPresent = true;
            
            }
            
            
        }
        else {
        
        JOptionPane.showMessageDialog(this,"Please select quantity smaller than availability", "Warning", JOptionPane.ERROR_MESSAGE);
        return;
        }
                
           }
        catch(Exception x)
        { JOptionPane.showMessageDialog(this, "There is some problem please try again later");
        } 
        
        
        
    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
      try{  Store s = (Store)suppComboBox1.getSelectedItem();
        
        if(order.getOrderItemList().size()>0&&s!=null)
        {

            order.setCustomer(customer);
            customer.addOrder(order);
            s.getMasterOrderCatalog().addOrder(order);
                   
            
            isCheckedOut = true;
            order = new Order();
            JOptionPane.showMessageDialog(this, "Medicines are delivered");
            populateOrderTable();
            populateProductTable();
        }
        else 
        {
            JOptionPane.showMessageDialog(this, "No items available in the cart","warning",JOptionPane.ERROR_MESSAGE);
        
        }
           }
        catch(Exception x)
        { JOptionPane.showMessageDialog(this, "There is some problem please try again later");
        } 
       
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
       try{      int selectedrow = orderTable.getSelectedRow();
            int modifiedQuantiy = Integer.parseInt(txtNewQuantity.getText());
            
          
        if (selectedrow>=0&& !txtNewQuantity.getText().isEmpty() && modifiedQuantiy !=0)
        {   
            OrderItem selectedOrderItem = (OrderItem)orderTable.getValueAt(selectedrow,0);
           
                        MedicineProduct p = selectedOrderItem.getProduct();
                        if(selectedOrderItem.getQuantity()+p.getAvailability()-modifiedQuantiy>=0){
                        p.setAvailability(selectedOrderItem.getQuantity()+p.getAvailability()-modifiedQuantiy);
                        selectedOrderItem.setQuantity(modifiedQuantiy);
            populateOrderTable();
            populateProductTable();
                        }
                        else 
                                {
                                 JOptionPane.showMessageDialog(this, "Modified quantity is greater than available quantity","warning",JOptionPane.ERROR_MESSAGE);
                                }
        
        }
        else 
            {
                JOptionPane.showMessageDialog(this, "Please select a row from the cart","warning",JOptionPane.ERROR_MESSAGE);
        
            }
           }
        catch(Exception x)
        { JOptionPane.showMessageDialog(this, "There is some problem please try again later");
        } 
    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed
     try{  String key = txtSearchKeyWord.getText();
        populateProductTableAfterSearch(key);
           }
        catch(Exception x)
        { JOptionPane.showMessageDialog(this, "There is some problem please try again later");
        } 
    }//GEN-LAST:event_btnSearchProductActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
      try{  int selectedrow = orderTable.getSelectedRow();
        
        if (selectedrow>=0)
        {   
            OrderItem selectedOrderItem = (OrderItem)orderTable.getValueAt(selectedrow,0);
           MedicineProduct p = selectedOrderItem.getProduct();
           p.setAvailability(selectedOrderItem.getQuantity()+p.getAvailability());
           order.getOrderItemList().remove(selectedOrderItem);
            populateOrderTable();
            populateProductTable();
            }
        else 
            {
                JOptionPane.showMessageDialog(this, "Please select a row from the cart","warning",JOptionPane.ERROR_MESSAGE);
                return;
            }
           }
        catch(Exception x)
        { JOptionPane.showMessageDialog(this, "There is some problem please try again later");
        } 
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JComboBox suppComboBox1;
    private javax.swing.JTextField txtNewQuantity;
    private javax.swing.JTextField txtSearchKeyWord;
    // End of variables declaration//GEN-END:variables

    private void populateSuppcomboBox() {
     try{ suppComboBox1.removeAllItems();
       for(Network ntwk: business.getNetworkList()){
       
        for(Enterprise etr : ntwk.getEnterpriseDirectory().getEnterpriseList()){
           
        if (etr instanceof SmartMedicineDeliveryEnterprise){
        Store s = ((SmartMedicineDeliveryEnterprise)etr).getStore();
          
                    suppComboBox1.addItem(s);
      }
        
        
        }
    
    }
      populateProductTable();
      if(!isCheckedOut){
      
          order = new Order();
//          masterOrderCatalog.addOrder(order);
          
      
      }
         }
        catch(Exception x)
        { JOptionPane.showMessageDialog(this, "There is some problem please try again later");
        } 
    }
    
    public void populateProductTable(){
    
    
        DefaultTableModel dfm =(DefaultTableModel) productTable.getModel();
        dfm.setRowCount(0);
        
        Store s = (Store)suppComboBox1.getSelectedItem();
        if(s!=null){
            for(MedicineProduct p : s.getProductList().getProductcatalog()){
            Object row[] = new Object[4];
            row[0]= p;
            row[1] = p.getModelNumber();
            
            row[2] = p.getAvailability();
            row[3] = p.getPrice();
            dfm.addRow(row);
            }
        
        }
        
    
    }

    private void populateProductTableAfterSearch(String searchKey) {
                DefaultTableModel dfm =(DefaultTableModel) productTable.getModel();
        dfm.setRowCount(0);
        
       
       for(Network ntwk: business.getNetworkList()){
       
        for(Enterprise etr : ntwk.getEnterpriseDirectory().getEnterpriseList()){
           
        if (etr instanceof SmartMedicineDeliveryEnterprise){
        Store s = ((SmartMedicineDeliveryEnterprise)etr).getStore();
            for(MedicineProduct p : s.getProductList().getProductcatalog())
            {
                if(searchKey.equals(p.getProdName()))
                    {
                     Object row[] = new Object[4];
                    row[0]= p;
                    row[1] = p.getModelNumber();
                    row[2] = p.getAvailability();
                    row[3] = p.getPrice();
                    dfm.addRow(row);
                    }
            }
       }

    }}}
    
    private void populateOrderTable()
    {
        DefaultTableModel dfm =(DefaultTableModel) orderTable.getModel();
        dfm.setRowCount(0);
        
        
        
            for(OrderItem oi : order.getOrderItemList()){
            Object row[] = new Object[4];
            row[0]= oi;
            row[1] = oi.getPrice();
            row[2] = oi.getQuantity();
            row[3] = oi.getPrice()*oi.getQuantity();
            dfm.addRow(row);
            }
        
     
    }
    
}
